var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import BaseRole from '../generated/resources/Role';
function sameValue(a, b) {
    if ((a === undefined || a === null) && (b === undefined || b === null)) {
        return true;
    }
    return a === b;
}
function sameRule(obj1, obj2) {
    for (var key in obj1) {
        if (!sameValue(obj1[key], obj2[key]))
            return false;
    }
    for (var key in obj2) {
        if (!sameValue(obj1[key], obj2[key]))
            return false;
    }
    return true;
}
function applyChanges(currentRules, changes, currentEnvironmentId, context) {
    if (!changes) {
        return currentRules;
    }
    var rulesToAdd = changes.add, rulesToRemove = changes.remove;
    return __spreadArray(__spreadArray([], (rulesToRemove
        ? rulesToRemove.reduce(function (filteredRules, ruleToRemove) {
            var ruleToRemoveWithEnvironmentId = __assign(__assign({}, ruleToRemove), { environment: currentEnvironmentId });
            var foundRule = filteredRules.find(function (rule) {
                return sameRule(rule, ruleToRemoveWithEnvironmentId);
            });
            if (!foundRule) {
                throw new Error("Cannot find rule ".concat(JSON.stringify(ruleToRemoveWithEnvironmentId), " to remove in ").concat(context, "!"));
            }
            return filteredRules.filter(function (rule) { return rule !== foundRule; });
        }, currentRules)
        : currentRules), true), (rulesToAdd
        ? rulesToAdd.map(function (change) {
            return (__assign({ environment: currentEnvironmentId }, change));
        })
        : []), true);
}
var RoleResource = /** @class */ (function (_super) {
    __extends(RoleResource, _super);
    function RoleResource() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Applies a set of changes to the permissions of the current environment
     */
    RoleResource.prototype.updateCurrentEnvironmentPermissions = function (roleId, changes) {
        return __awaiter(this, void 0, void 0, function () {
            var currentEnvironmentId, _a, role, updateItemTypePermissions, updateUploadPermissions, body;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.client.config.environment;
                        if (_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.client.environments.list()];
                    case 1:
                        _a = (_b.sent()).find(function (environment) { return environment.meta.primary; }).id;
                        _b.label = 2;
                    case 2:
                        currentEnvironmentId = _a;
                        return [4 /*yield*/, this.find(roleId)];
                    case 3:
                        role = _b.sent();
                        updateItemTypePermissions = Boolean(changes.positive_item_type_permissions ||
                            changes.negative_item_type_permissions);
                        updateUploadPermissions = Boolean(changes.positive_upload_permissions ||
                            changes.negative_upload_permissions);
                        body = __assign(__assign({}, (updateItemTypePermissions
                            ? {
                                positive_item_type_permissions: applyChanges(role.positive_item_type_permissions, changes.positive_item_type_permissions, currentEnvironmentId, 'positive_item_type_permissions'),
                                negative_item_type_permissions: applyChanges(role.negative_item_type_permissions, changes.negative_item_type_permissions, currentEnvironmentId, 'negative_item_type_permissions'),
                            }
                            : {})), (updateUploadPermissions
                            ? {
                                positive_upload_permissions: applyChanges(role.positive_upload_permissions, changes.positive_upload_permissions, currentEnvironmentId, 'positive_upload_permissions'),
                                negative_upload_permissions: applyChanges(role.negative_upload_permissions, changes.negative_upload_permissions, currentEnvironmentId, 'negative_upload_permissions'),
                            }
                            : {}));
                        return [2 /*return*/, this.update(roleId, body)];
                }
            });
        });
    };
    return RoleResource;
}(BaseRole));
export default RoleResource;
//# sourceMappingURL=Role.js.map